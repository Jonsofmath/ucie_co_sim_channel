// File: D:\jonathan\Documents\MATLAB\Examples\ucie_sim_c_build\ucie_sim_c_dpi_pkg.sv
// Created: 2025-03-13 13:32:18
// Generated by MATLAB 24.2 and HDL Verifier 24.2

`timescale 1ns / 1ns
package ucie_sim_c_dpi_pkg;

/*Simulink signal name: 'VGAParameter' Bus Object Name: 'struct_RnY6e51lDiqqn300n3CSMB'*/
typedef struct{
	/* Simulink signal name: 'Gain' */
	real Gain;
	/* Simulink signal name: 'Mode' */
	real Mode;
}struct_RnY6e51lDiqqn300n3CSMB;

/*Simulink signal name: 'DFEClkFwdParameter' Bus Object Name: 'struct_M21dWdeJoYKmUlJw54zjGH'*/
typedef struct{
	/* Simulink signal name: 'ForwardClockOffset' */
	real ForwardClockOffset;
	/* Simulink signal name: 'Mode' */
	real Mode;
	/* Simulink signal name: 'ReferenceOffset' */
	real ReferenceOffset;
	/* Simulink signal name: 'PhaseOffset' */
	real PhaseOffset;
	/* Simulink signal name: 'TapWeights' */
	real TapWeights [4];
}struct_M21dWdeJoYKmUlJw54zjGH;

/*Simulink signal name: 'CTLEParameter' Bus Object Name: 'struct_Hh4802JZGHB15BspDZ57H'*/
typedef struct{
	/* Simulink signal name: 'Mode' */
	real Mode;
	/* Simulink signal name: 'ConfigSelect' */
	real ConfigSelect;
	/* Simulink signal name: 'SliceSelect' */
	real SliceSelect;
}struct_Hh4802JZGHB15BspDZ57H;

/*Simulink signal name: 'FFEParameter' Bus Object Name: 'struct_HG5YRIkYWgYOkgznq3h4n'*/
typedef struct{
	/* Simulink signal name: 'Mode' */
	real Mode;
	/* Simulink signal name: 'TapWeights' */
	real TapWeights [2];
	/* Simulink signal name: 'ConfigSelect' */
	real ConfigSelect;
}struct_HG5YRIkYWgYOkgznq3h4n;


// Declare imported C functions
import "DPI-C" function chandle DPI_ucie_sim_c_initialize(chandle existhandle);
import "DPI-C" function chandle DPI_ucie_sim_c_reset_f(input chandle objhandle,
/*Simulink signal name: 'Inport'*/
input real Inport,
/*Simulink signal name: 'Outport'*/
output real Outport);
import "DPI-C" function void DPI_ucie_sim_c_output_f(input chandle objhandle,
/*Simulink signal name: 'Inport'*/
input real Inport,
/*Simulink signal name: 'Outport'*/
output real Outport);
import "DPI-C" function void DPI_ucie_sim_c_update_f(input chandle objhandle,
/*Simulink signal name: 'Inport'*/
input real Inport);
import "DPI-C" function void DPI_ucie_sim_c_terminate(input chandle objhandle);
import "DPI-C" function string DPI_ucie_sim_c_getErrMsg(input chandle objhandle);

import "DPI-C" function void DPI_ucie_sim_c_setparam_DFEClkFwdParameter_f(input chandle objhandle,
/*Simulink parameter name: 'ForwardClockOffset'*/
input real RTWStructParam_DFEClkFwdParameter_ForwardClockOffset,
/*Simulink parameter name: 'Mode'*/
input real RTWStructParam_DFEClkFwdParameter_Mode,
/*Simulink parameter name: 'ReferenceOffset'*/
input real RTWStructParam_DFEClkFwdParameter_ReferenceOffset,
/*Simulink parameter name: 'PhaseOffset'*/
input real RTWStructParam_DFEClkFwdParameter_PhaseOffset,
/*Simulink parameter name: 'TapWeights'*/
input real RTWStructParam_DFEClkFwdParameter_TapWeights [4]);

// Define SystemVerilog wrapper functions for tunable parameter native struct support for parameter: DFEClkFwdParameter
function void DPI_ucie_sim_c_setparam_DFEClkFwdParameter(input chandle objhandle,
/*Simulink parameter name: 'DFEClkFwdParameter'*/
input struct_M21dWdeJoYKmUlJw54zjGH DFEClkFwdParameter);
	DPI_ucie_sim_c_setparam_DFEClkFwdParameter_f(objhandle,DFEClkFwdParameter.ForwardClockOffset, DFEClkFwdParameter.Mode, DFEClkFwdParameter.ReferenceOffset, DFEClkFwdParameter.PhaseOffset, DFEClkFwdParameter.TapWeights);
endfunction


import "DPI-C" function void DPI_ucie_sim_c_setparam_FFEParameter_f(input chandle objhandle,
/*Simulink parameter name: 'Mode'*/
input real RTWStructParam_FFEParameter_Mode,
/*Simulink parameter name: 'TapWeights'*/
input real RTWStructParam_FFEParameter_TapWeights [2],
/*Simulink parameter name: 'ConfigSelect'*/
input real RTWStructParam_FFEParameter_ConfigSelect);

// Define SystemVerilog wrapper functions for tunable parameter native struct support for parameter: FFEParameter
function void DPI_ucie_sim_c_setparam_FFEParameter(input chandle objhandle,
/*Simulink parameter name: 'FFEParameter'*/
input struct_HG5YRIkYWgYOkgznq3h4n FFEParameter);
	DPI_ucie_sim_c_setparam_FFEParameter_f(objhandle,FFEParameter.Mode, FFEParameter.TapWeights, FFEParameter.ConfigSelect);
endfunction


import "DPI-C" function void DPI_ucie_sim_c_setparam_CTLEParameter_f(input chandle objhandle,
/*Simulink parameter name: 'Mode'*/
input real RTWStructParam_CTLEParameter_Mode,
/*Simulink parameter name: 'ConfigSelect'*/
input real RTWStructParam_CTLEParameter_ConfigSelect,
/*Simulink parameter name: 'SliceSelect'*/
input real RTWStructParam_CTLEParameter_SliceSelect);

// Define SystemVerilog wrapper functions for tunable parameter native struct support for parameter: CTLEParameter
function void DPI_ucie_sim_c_setparam_CTLEParameter(input chandle objhandle,
/*Simulink parameter name: 'CTLEParameter'*/
input struct_Hh4802JZGHB15BspDZ57H CTLEParameter);
	DPI_ucie_sim_c_setparam_CTLEParameter_f(objhandle,CTLEParameter.Mode, CTLEParameter.ConfigSelect, CTLEParameter.SliceSelect);
endfunction


import "DPI-C" function void DPI_ucie_sim_c_setparam_VGAParameter_f(input chandle objhandle,
/*Simulink parameter name: 'Gain'*/
input real RTWStructParam_VGAParameter_Gain,
/*Simulink parameter name: 'Mode'*/
input real RTWStructParam_VGAParameter_Mode);

// Define SystemVerilog wrapper functions for tunable parameter native struct support for parameter: VGAParameter
function void DPI_ucie_sim_c_setparam_VGAParameter(input chandle objhandle,
/*Simulink parameter name: 'VGAParameter'*/
input struct_RnY6e51lDiqqn300n3CSMB VGAParameter);
	DPI_ucie_sim_c_setparam_VGAParameter_f(objhandle,VGAParameter.Gain, VGAParameter.Mode);
endfunction


import "DPI-C" function void DPI_ucie_sim_c_setparam_Aggressors_f(input chandle objhandle,
/*Simulink parameter name: 'Aggressors'*/
input real RTWStructParam_Aggressors);

// Define SystemVerilog wrapper functions for tunable parameter native struct support for parameter: Aggressors
function void DPI_ucie_sim_c_setparam_Aggressors(input chandle objhandle,
/*Simulink parameter name: 'Aggressors'*/
input real RTWStructParam_Aggressors);
	DPI_ucie_sim_c_setparam_Aggressors_f(objhandle,RTWStructParam_Aggressors);
endfunction


import "DPI-C" function void DPI_ucie_sim_c_setparam_ChannelImpulse_f(input chandle objhandle,
/*Simulink parameter name: 'ChannelImpulse'*/
input real RTWStructParam_ChannelImpulse [8388608]);

// Define SystemVerilog wrapper functions for tunable parameter native struct support for parameter: ChannelImpulse
function void DPI_ucie_sim_c_setparam_ChannelImpulse(input chandle objhandle,
/*Simulink parameter name: 'ChannelImpulse'*/
input real RTWStructParam_ChannelImpulse [8388608]);
	DPI_ucie_sim_c_setparam_ChannelImpulse_f(objhandle,RTWStructParam_ChannelImpulse);
endfunction


import "DPI-C" function void DPI_ucie_sim_c_setparam_Modulation_f(input chandle objhandle,
/*Simulink parameter name: 'Modulation'*/
input real RTWStructParam_Modulation);

// Define SystemVerilog wrapper functions for tunable parameter native struct support for parameter: Modulation
function void DPI_ucie_sim_c_setparam_Modulation(input chandle objhandle,
/*Simulink parameter name: 'Modulation'*/
input real RTWStructParam_Modulation);
	DPI_ucie_sim_c_setparam_Modulation_f(objhandle,RTWStructParam_Modulation);
endfunction


import "DPI-C" function void DPI_ucie_sim_c_setparam_RowSize_f(input chandle objhandle,
/*Simulink parameter name: 'RowSize'*/
input real RTWStructParam_RowSize);

// Define SystemVerilog wrapper functions for tunable parameter native struct support for parameter: RowSize
function void DPI_ucie_sim_c_setparam_RowSize(input chandle objhandle,
/*Simulink parameter name: 'RowSize'*/
input real RTWStructParam_RowSize);
	DPI_ucie_sim_c_setparam_RowSize_f(objhandle,RTWStructParam_RowSize);
endfunction


import "DPI-C" function void DPI_ucie_sim_c_setparam_SampleInterval_f(input chandle objhandle,
/*Simulink parameter name: 'SampleInterval'*/
input real RTWStructParam_SampleInterval);

// Define SystemVerilog wrapper functions for tunable parameter native struct support for parameter: SampleInterval
function void DPI_ucie_sim_c_setparam_SampleInterval(input chandle objhandle,
/*Simulink parameter name: 'SampleInterval'*/
input real RTWStructParam_SampleInterval);
	DPI_ucie_sim_c_setparam_SampleInterval_f(objhandle,RTWStructParam_SampleInterval);
endfunction


import "DPI-C" function void DPI_ucie_sim_c_setparam_SymbolTime_f(input chandle objhandle,
/*Simulink parameter name: 'SymbolTime'*/
input real RTWStructParam_SymbolTime);

// Define SystemVerilog wrapper functions for tunable parameter native struct support for parameter: SymbolTime
function void DPI_ucie_sim_c_setparam_SymbolTime(input chandle objhandle,
/*Simulink parameter name: 'SymbolTime'*/
input real RTWStructParam_SymbolTime);
	DPI_ucie_sim_c_setparam_SymbolTime_f(objhandle,RTWStructParam_SymbolTime);
endfunction

// Define SystemVerilog wrapper functions for native struct and scalarize ports support


function chandle DPI_ucie_sim_c_reset(input chandle objhandle,
/*Simulink signal name: 'Inport'*/
input real Inport,
/*Simulink signal name: 'Outport'*/
output real Outport);
	objhandle=DPI_ucie_sim_c_reset_f(objhandle,
Inport, Outport);
	return objhandle;
endfunction

function void DPI_ucie_sim_c_output(input chandle objhandle,
/*Simulink signal name: 'Inport'*/
input real Inport,
/*Simulink signal name: 'Outport'*/
output real Outport);
	DPI_ucie_sim_c_output_f(objhandle,
Inport, Outport);
endfunction

function void DPI_ucie_sim_c_update(input chandle objhandle,
/*Simulink signal name: 'Inport'*/
input real Inport);
	DPI_ucie_sim_c_update_f(objhandle,
Inport);
endfunction

// Define SystemVerilog function for run-time error reporting
function automatic void SV_ucie_sim_c_reportErrMsg(input chandle objhandle);
string errMsg = DPI_ucie_sim_c_getErrMsg(objhandle);
if(errMsg.len() != 0) begin
	$fatal(1, "Run-time error : %s ", errMsg);
end
endfunction








endpackage : ucie_sim_c_dpi_pkg
